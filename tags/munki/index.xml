<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Munki on Robert Terakedis</title><link>https://blog.euc-rt.me/tags/munki/</link><description>Recent content in Munki on Robert Terakedis</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright Â© 2020 Robert Terakedis; all rights reserved.</copyright><lastBuildDate>Mon, 23 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.euc-rt.me/tags/munki/index.xml" rel="self" type="application/rss+xml"/><item><title>Mapping Concepts from Munki to WS1 UEM</title><link>https://blog.euc-rt.me/post/mapping-concepts-from-munki-to-workspace-one-uem/</link><pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate><guid>https://blog.euc-rt.me/post/mapping-concepts-from-munki-to-workspace-one-uem/</guid><description>
&lt;h2 id="background">Background&lt;/h2>
&lt;p>Since Workspace ONE UEM version 9.3, VMware has included the open-source &lt;a href="https://github.com/munki/munki">munki&lt;/a> binaries in the Workspace ONE Intelligent Hub for macOS. The intent of this integration was to give macOS admins the ability to distribute 3rd-party non-store macOS apps, without the need to host any backing instrastructure for munki. Because this integration was meant to give admins some of the commonly used functionality, it was not integrated in such a way to include support for ALL munki's functionality. This has left some confusion in the community, particularly with Workspace ONE UEM administrators with extensive munki knowledge/background.&lt;/p></description></item></channel></rss>